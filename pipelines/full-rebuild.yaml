apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: full-rebuild
  namespace: okd
spec:
  params:
    - name: initial-image
      type: string
      description: Initial image to import
      default: registry.ci.openshift.org/origin/release:4.12.0-0.okd-2022-07-16-093448
    - name: result-mirror-location
      type: string
      description: Location to mirror resulting images
      default: quay.io/vrutkovs/okd-release
    - name: result-image
      type: string
      description: Resulting release location
      default: quay.io/vrutkovs/okd-release:4.12.0-0.okd-centos9-full-rebuild
    - name: result-image-name
      type: string
      description: Internal release name
      default: 4.12.0-0.okd-centos9-full-rebuild
  workspaces:
    - name: push-credentials
  tasks:
    - name: initial-import
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc adm release mirror \
              $(params.initial-image) \
              --to-image-stream release
    - name: prepare-build-images
      runAfter:
      - initial-import
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build builder --follow && \
            oc start-build forked-dockerfiles --follow && \
            oc start-build base --follow
    - name: build-batch-01
      runAfter:
      - prepare-build-images
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build agent-installer-node-agent
            oc start-build agent-installer-orchestrator
            oc start-build alibaba-cloud-controller-manager
            oc start-build alibaba-cloud-csi-driver
            oc start-build alibaba-disk-csi-driver-operator
            oc start-build alibaba-machine-controllers
            oc start-build apiserver-network-proxy
            oc start-build aws-cloud-controller-manager
            oc start-build aws-cluster-api-controllers
            oc start-build aws-ebs-csi-driver-operator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-02
      runAfter:
      - build-batch-01
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build aws-ebs-csi-driver
            oc start-build aws-machine-controllers
            oc start-build aws-pod-identity-webhook
            oc start-build azure-cloud-controller-manager
            oc start-build azure-cloud-node-manager
            oc start-build azure-cluster-api-controllers
            oc start-build azure-disk-csi-driver-operator
            oc start-build azure-disk-csi-driver
            oc start-build azure-file-csi-driver-operator
            oc start-build azure-file-csi-driver
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-03
      runAfter:
      - build-batch-02
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build azure-machine-controllers
            oc start-build baremetal-machine-controllers
            oc start-build baremetal-operator
            oc start-build baremetal-runtimecfg
            oc start-build branding
            oc start-build cloud-credential-operator
            oc start-build cloud-network-config-controller
            oc start-build cluster-authentication-operator
            oc start-build cluster-autoscaler-operator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-04
      runAfter:
      - build-batch-03
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build cluster-autoscaler
            oc start-build cluster-baremetal-operator
            oc start-build cluster-bootstrap
            oc start-build cluster-capi-controllers
            oc start-build cluster-capi-operator
            oc start-build cluster-cloud-controller-manager-operator
            oc start-build cluster-config-operator
            oc start-build cluster-control-plane-machine-set-operator
            oc start-build cluster-csi-snapshot-controller-operator
            oc start-build cluster-dns-operator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-05
      runAfter:
      - build-batch-04
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build cluster-etcd-operator
            oc start-build cluster-image-registry-operator
            oc start-build cluster-ingress-operator
            oc start-build cluster-kube-apiserver-operator
            oc start-build cluster-kube-cluster-api-operator
            oc start-build cluster-kube-controller-manager-operator
            oc start-build cluster-kube-scheduler-operator
            oc start-build cluster-kube-storage-version-migrator-operator
            oc start-build cluster-machine-approver
            oc start-build cluster-monitoring-operator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-06
      runAfter:
      - build-batch-05
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build cluster-network-operator
            oc start-build cluster-openshift-apiserver-operator
            oc start-build cluster-openshift-controller-manager-operator
            oc start-build cluster-policy-controller
            oc start-build cluster-samples-operator
            oc start-build cluster-storage-operator
            oc start-build cluster-update-keys
            oc start-build cluster-version-operator
            oc start-build configmap-reloader
            oc start-build console-operator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-07
      runAfter:
      - build-batch-06
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build console
            oc start-build container-networking-plugins
            oc start-build contour-operator
            oc start-build contour
            oc start-build coredns
            oc start-build csi-driver-manila-operator
            oc start-build csi-driver-manila
            oc start-build csi-driver-nfs
            oc start-build csi-driver-shared-resource-operator
            oc start-build csi-driver-shared-resource-webhook
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-08
      runAfter:
      - build-batch-07
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build csi-driver-shared-resource
            oc start-build csi-external-attacher
            oc start-build csi-external-provisioner
            oc start-build csi-external-resizer
            oc start-build csi-external-snapshotter
            oc start-build csi-livenessprobe
            oc start-build csi-node-driver-registrar
            oc start-build csi-snapshot-controller
            oc start-build csi-snapshot-validation-webhook
            oc start-build deployer
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-09
      runAfter:
      - build-batch-08
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build docker-builder
            oc start-build docker-registry
            oc start-build egress-router-cni
            oc start-build etcd
            oc start-build external-dns
            oc start-build gcp-cloud-controller-manager
            oc start-build gcp-cluster-api-controllers
            oc start-build gcp-machine-controllers
            oc start-build gcp-pd-csi-driver-operator
            oc start-build gcp-pd-csi-driver
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-10
      runAfter:
      - build-batch-09
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build haproxy-router-base
            oc start-build hypershift
            oc start-build ibm-cloud-controller-manager
            oc start-build ibmcloud-machine-controllers
            oc start-build ibm-vpc-block-csi-driver-operator
            oc start-build ibm-vpc-block-csi-driver
            oc start-build ibm-vpc-node-label-updater
            oc start-build insights-operator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-11
      runAfter:
      - build-batch-10
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build ironic-agent
            oc start-build ironic-machine-os-downloader
            oc start-build ironic-static-ip-manager
            oc start-build k8s-prometheus-adapter
            oc start-build keepalived-ipfailover
            oc start-build kube-proxy
            oc start-build kube-rbac-proxy
            oc start-build kube-state-metrics
            oc start-build kube-storage-version-migrator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-12
      runAfter:
      - build-batch-11
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build local-storage-static-provisioner
            oc start-build machine-api-operator
            oc start-build machine-config-operator
            oc start-build machine-image-customization-controller
            oc start-build multus-admission-controller
            oc start-build multus-cni
            oc start-build multus-networkpolicy
            oc start-build multus-route-override-cni
            oc start-build multus-whereabouts-ipam-cni
            oc start-build must-gather
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-13
      runAfter:
      - build-batch-12
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build bond-cni
            oc start-build network-metrics-daemon
            oc start-build nutanix-machine-controllers
            oc start-build oauth-apiserver
            oc start-build oauth-proxy
            oc start-build oauth-server
            oc start-build oc-mirror
            oc start-build oc
            oc start-build openshift-apiserver
            oc start-build openshift-controller-manager
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-14
      runAfter:
      - build-batch-13
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build openshift-state-metrics
            oc start-build openstack-cinder-csi-driver-operator
            oc start-build openstack-cinder-csi-driver
            oc start-build openstack-cloud-controller-manager
            oc start-build openstack-machine-api-provider
            oc start-build openstack-machine-controllers
            oc start-build operator-lifecycle-manager
            oc start-build operator-marketplace
            oc start-build ovirt-csi-driver-operator
            oc start-build ovirt-csi-driver
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-15
      runAfter:
      - build-batch-14
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build ovirt-installer
            oc start-build ovirt-machine-controllers
            oc start-build pod
            oc start-build powervs-cloud-controller-manager
            oc start-build powervs-machine-controllers
            oc start-build prometheus-alertmanager
            oc start-build prometheus-config-reloader
            oc start-build prometheus-node-exporter
            oc start-build prometheus-operator-admission-webhook
            oc start-build prometheus-operator
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-16
      runAfter:
      - build-batch-15
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build prometheus
            oc start-build prom-label-proxy
            oc start-build service-ca-operator
            oc start-build telemeter
            oc start-build thanos
            oc start-build vertical-pod-autoscaler
            oc start-build vsphere-cloud-controller-manager
            oc start-build vsphere-cluster-api-controllers
            oc start-build vsphere-csi-driver-operator
            oc start-build vsphere-csi-driver-syncer
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-17
      runAfter:
      - build-batch-16
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build vsphere-csi-driver
            oc start-build vsphere-problem-detector
            oc start-build baremetal-installer
            oc start-build installer-artifacts
            oc start-build installer
            oc start-build hyperkube
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-18
      runAfter:
      - build-batch-17
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build agent-installer-api-server
            oc start-build agent-installer-csr-approver
            oc start-build cli-artifacts
            oc start-build tools
            oc wait --timeout=30m --for=condition=Running=False builds --all
            FAILED_BUILDS=$(oc get builds -o=jsonpath='{.items[?(@.status.phase=="Failed")].metadata.name}')
            if [[ -n "${FAILED_BUILDS}" ]]; then
              echo "Failed builds: ${FAILED_BUILDS}"
              exit 1
            fi
    - name: build-batch-19
      runAfter:
      - build-batch-18
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
        - name: SCRIPT
          value: |
            oc start-build tests -w
    - name: new-release
      runAfter:
      - build-batch-19
      taskRef:
        name: openshift-client
        kind: ClusterTask
      workspaces:
      - name: manifest-dir
        workspace: push-credentials
      params:
        - name: SCRIPT
          value: |
            oc adm release new \
            --registry-config=$(workspaces.manifest-dir.path)/auth.json \
            --from-image-stream release \
            --insecure=true \
            --mirror $(params.result-mirror-location) \
            --to-image $(params.result-image) \
            --name=$(params.result-image-name)
